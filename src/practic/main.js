// console.log('Hello World!');

// const arr = [1, 2, 3, 4, 5];
// const resultSumElementsArray = arr.reduce((a, b) => a + b);
// console.log(resultSumElementsArray);

//Комбинация клавиш для консоли коммитов
//Сtrl + K
//Далее пишем текстовой комментарий
//Нажимаем коммит и push
//И в окне нажимаем push

// {
//     // Преобразование типов? еще раз
//     // Задачи на следующие занятие
//     // Просмотр видео Богдана 2-5 часов
//     // Мутабельные методы массивов?
//     // Практика с методамми массивов
//     // Ознакомится с областью видемости
//     // Решить и прислать код нескольких кат с codewars
// }

// 1. Какие типы данных есть в Javascript?
/**
 * Примитивные типы:
 * string
 * number
 * boolean
 * null
 * undefined
 * bigint
 * symbol
 * Ссылочный тип:
 * Object*/

//2. Что такое undeclared и undefined переменные?
/**
 * undeclared — не объявленные переменные, которых не существует в программе.
 * undefined — объявленные переменные, которым не присвоено значение.
 * */

//3. Что такое null и какие у него проблемы?
/**
 * Мой ответ:
 * null - это тип данных, который обозначает,
 * что переменная пустая и в неё далее в коде с будет записано значение
 *
 * Правильный ответ:
 * null - тип данных, который обозначает отсутствие какого-либо значения.
 * В контексте логических значений рассматривается, как false.
 * typeof null === 'object'
 * объект
 * */

// 4. Что такое глобальные объекты и какие у них проблемы?
/**
 * Глобальные объекты - это переменные, функции, которые доступны
 * в любом месте программы. В браузере это window, в Node.js это global.
 *
 * Проблемы
 * Все глобальные объекты находятся в одном глобальном пространстве имен,
 * из-за чего всегда существует вероятность конфликта имён -
 * когда две части приложения определяют
 * глобальные переменные с одинаковыми именами, но для разных целей.
 * При встраивании стороннего кода также есть вероятность конфликта имён
 *
 * */

// 5. Что вызывает и как происходит явное и неявное приведение к типу String?
/**
 * Преобразование к типу String вызывает:
 *
 * конкатенация - при сложении значения какого-либо типа со строкой,
 * то складываемое значение неявно преобразуется в строку
 * let num = 42;
 * let str = num + '';  // '42'
 *
 * метод toString()
 * Этот метод принадлежит объекту Number.Prototype.
 * Он принимает целое число или число с плавающей запятой
 * и преобразует его в строковый тип.
 * Этот метод принимает единственный необязательный параметр,
 * это целое число от 2 до 36, которое используется для указания
 * основания для представления числовых значений.
 *
 * let num=213;
 * let str = num.toString(8);  // '325'
 *
 * метод toString() - преобразует переданное ему значение в строку
 * Этот метод принимает в качестве параметра число или
 * число с плавающей запятой и преобразует его в символ.
 *
 *Использование шаблонных строк для преобразования числа в строку.
 * let variable name = ' ${value}';
 *
 * */

//6. Что вызывает и как происходит явное и неявное приведение к типу Boolean?
/**
 * Boolean() - метод явного преобразования значения к логическому типу
 *
 * использование логических операторов
 *
 * использование в логических контекстах(лямбда-операторов, конструкций ifelse,)
 * */

// 7. Что вызывает и как происходит явное и неявное приведение к типу Number?
/**
 * Number() - метод явного преобразования
 *Number('5') //5
 *
 * Методы неявного преобразования
 * Использование операторов сравнения <, >, <=, >=,
 * 4 > '5' // 4 > 5
 *
 * Использование побитовых операторов |, &, ^, ~.
 * true | 0 // 1 | 0
 *
 * Арифметические операторы -, +, *, /, %.
 * Оператор + преобразует к числу только в том случае,
 * если в выражении нет строки в качестве операнда
 * 10 - null // 10 - 0
 *
 *Унарный оператор +
 * +'123' //123
 *
 * Оператор нестрогого равенства ==, !=.
 * Оператор == не вызывает неявное преобразование,
 * если оба операнда являются строками.
 * 123 != '456' // 123 != 456
 *
 * parseInt() - преобразует строку в число, если первые символы строки числа
 * const num = '6'
 * const num= str.parseInt();
 *
 * При преобразовании строк в числа система сначала обрезает пробелы,
 * а также символы \n и \t в начале и в конце строки и возвращает NaN,
 * если полученная строка не является действительным числом.
 * Если строка пуста, возвращается 0.
 *
 * Значения типа Symbol не могут быть преобразованы ни явно, ни неявно.
 *
 * При применении оператора == к null или undefined преобразования в число не производится.
 *
 * null == 0       // false
 * undefined == 0  // false
 * Значение NaN не равно ничему, включая себя.
 *
 * */

//Мутабельные методы
// console.log(array.pop()); //ничего не принимает
// console.log(array.push()); //принимает элементы и возвращает новую длину
// console.log(array.shift()); // для удаления первого элемента
// console.log(array.unshift()); // для добавления первого элемента возвращает длину
// console.log(array.sort()); //
// console.log(array.reverse()); // toReverse
// console.log(array.splice(-1, 0,)); //
// console.log(array.fill()); //заполняет массив элементами

//CodeWars
// {
//   /**
//    * Сумма квадратов (n)
//    * Дополните функцию вычисления суммы квадратов так, чтобы она возводила в квадрат каждое переданное ей число, а затем суммировала результаты.
//    *
//    * Например, для [1, 2, 2] он должен вернуть 9
//    *  1^2 + 2^2 + 2^2 =9.
//    * */
//   // function squareSum(numbers) {
//   //   return numbers.reduce((acc, curr) => acc + curr ** 2, 0);
//   // }
//   //
//   // console.log(squareSum([1, 2])); //5
//   // console.log(squareSum([0, 3, 4, 5])); //50
//   // console.log(squareSum([])); //0
// }

// {
//   /**
//    * Перевернутые слова
//    * Дополните решение так, чтобы оно переворачивало все слова в переданной строке.
//    *
//    * Слова разделяются ровно одним пробелом, без пробелов в начале или в конце.
//    *
//    * Пример (Ввод --> Вывод):
//    *
//    * "The greatest victory is that which requires no battle"
//    * --> "battle no requires which that is victory greatest The" */
//
//   function reverseWords(str) {
//     const arr = str.split(" ");
//     return str.split(" ").reverse().join(" "); // reverse those words
//   }
//
//   console.log(reverseWords("hello world!")); //"world! hello"
//   console.log(reverseWords("yoda doesn't speak like this")); //"this like speak doesn't yoda"
//   console.log(reverseWords("foobar")); // "foobar"
//   console.log(reverseWords("kata editor")); //"editor kata"
//   console.log(reverseWords("row row row your boat")); //"boat your row row row"
//   console.log(reverseWords("")); //""
// }

// {
//   //Разгром предложения
//   /**
//    * апишите функцию, которая принимает массив слов,
//    * объединяет их в предложение и возвращает это предложение.
//    * Вы можете не обращать внимания на необходимость очистки слов
//    * или добавления знаков препинания, но вы должны добавлять
//    * робелы между словами. Будьте внимательны, в начале или
//    * в конце предложения не должно быть пробелов!
//    *
//    * Пример
//    * ['hello', 'world', 'this', 'is', 'great']  =>
//    * 'hello world this is great'*/
//
//   function smash(words) {
//     return words.join(" ");
//   }
//
//   console.log(smash(["hello", "world"])); //"hello world"
//   console.log(smash(["hello", "amazing", "world"])); //"hello amazing world"
//   console.log(smash(["this", "is", "a", "really", "long", "sentence"])); //this is a really long sentence"
// }

// {
//   //Отфильтровывать гусей
//   /**
//    * Напишите функцию, которая принимает в качестве аргумента
//    * список строк и возвращает отфильтрованный список,
//    * содержащий те же элементы, но без «гусей».
//    *
//    * Гуси — это любые строки из следующего массива,
//    * который предварительно заполнен в вашем решении:
//    * ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
//    *
//    * Например, если этот массив был передан в качестве аргумента:
//    * ["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
//    *
//    * Ваша функция вернет следующий массив:
//    *["Mallard", "Hook Bill", "Crested", "Blue Swedish"]
//    *
//    * Элементы в возвращаемом массиве должны быть в том же порядке,
//    * что и в исходном массиве, переданном вашей функции, но без «гусей».
//    * Обратите внимание, что все строки будут в том же регистре,
//    * что и исходные, а некоторые элементы могут повторяться.
//    * */
//
//   function filterOutGeese(birds) {
//     const geeses = [
//       "African",
//       "Roman Tufted",
//       "Toulouse",
//       "Pilgrim",
//       "Steinbacher",
//     ];
//     const res = [];
//     for (let i = 0; i < birds.length; i++) {
//       if (!geeses.includes(birds[i])) {
//         res.push(birds[i]);
//       }
//     }
//     return res;
//   }
//
//   console.log(
//     filterOutGeese([
//       "Mallard",
//       "Hook Bill",
//       "African",
//       "Crested",
//       "Pilgrim",
//       "Toulouse",
//       "Blue Swedish",
//     ]),
//   );
// }
//   //["Mallard", "Hook Bill", "Crested", "Blue Swedish"]
// }

// {
//   //Новичок - Сокращать, но увеличивать
//   /**
//    * Учитывая непустой массив целых чисел, верните результат
//    * умножения значений по порядку. Пример:
//    *
//    * [1, 2, 3, 4] => 1 * 2 * 3 * 4 = 24
//    * */
//
//   function multiplyNumbers(arr) {
//     debugger;
//     return arr.sort((a, b) => a - b).reduce((acc, curr) => acc * curr, 1);
//   }
//
//   console.log(multiplyNumbers([1, 2, 3])); //6
//   console.log(multiplyNumbers([4, 1, 1, 1, 4])); //16
//   console.log(multiplyNumbers([2, 2, 2, 2, 2, 2])); //64
// }

//практика после 3-его урока
// {
//   const firstUser = {
//     name: "Alice",
//     age: 21,
//     weddings: false,
//   };
//
//   const usersBase = (user, addAt = Date()) =>
//     //     ({
//     //   ...user,
//     //   addAt,
//     // });
//     // {
//     //   const newUser = Object.assign({ addAt }, user);
//     //   return newUser;
//     // };
//
//   console.table(usersBase(firstUser));
// }

// {
//   const fnWithError = () => {
//     throw new Error("AAAAAA");
//   };
//
//   try {
//     fnWithError();
//   } catch (err) {
//     console.error(err);
//     console.error(err.message);
//   }
//
//   console.log("continue");
// }

// Решение задач CodeWars 9/11

// {
//   /**
//    * Суммировать смешанный массив
//    * Учитывая массив целых чисел в виде строк и чисел,
//    * верните сумму значений массива, как если бы все они были числами.
//    * */
//
//   function sumMix(x) {
//     let sum = 0;
//     // for (let i = 0; i < x.length; i++) {
//     //   if (typeof x[i] === "string") {
//     //     sum += parseInt(x[i]);
//     //   } else {
//     //     sum += x[i];
//     //   }
//     // }
//
//     // for (let n of x) {
//     //   sum += parseInt(n);
//     // }
//     // sum = x.map((item) => +item).reduce((s, n) => s + n, 0);
//     // sum = x.map((item) => item).reduce((s, n) => s + +n, 0);
//     return sum;
//   }
//   console.log(sumMix([9, 3, "7", "3"])); //22
//   console.log(sumMix(["5", "0", 9, 3, 2, 1, "9", 6, 7])); // 42
// }
